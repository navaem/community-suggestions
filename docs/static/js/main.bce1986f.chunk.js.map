{"version":3,"sources":["logo.svg","Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","items","header","description","Cards","useState","inProp","setInProp","setTimeout","className","Card","Group","randItems","indices","i","temp","Math","floor","random","length","indexOf","push","filter","item","index","array","App","steps","wrapper","loop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,qJCIrCC,EAAQ,CACV,CACIC,OAAQ,UACRC,YACI,0EAER,CACID,OAAQ,uBACRC,YACI,kHAER,CACID,OAAQ,QACRC,YACI,oHAER,CACID,OAAQ,QACRC,YACI,mGAGR,CACID,OAAQ,sBACRC,YACI,kKAKR,CACID,OAAQ,8BACRC,YACI,iDAER,CACID,OAAQ,mBACRC,YACI,wEAIR,CACID,OAAQ,UACRC,YACI,4JAGR,CACID,OAAQ,uBACRC,YACI,0GAGR,CACID,OAAQ,OACRC,YACI,6DAER,CACID,OAAQ,qBACRC,YACI,8HAGR,CACID,OAAQ,mBACRC,YACI,sGAGR,CACID,OAAQ,iBACRC,YACI,iFAER,CACID,OAAQ,QACRC,YACI,kGAGR,CACID,OAAQ,UACRC,YACI,2EAER,CACID,OAAQ,UACRC,YACI,oFAIG,SAASC,IAAS,IAAD,EACAC,oBAAS,GADT,mBACrBC,EADqB,KACbC,EADa,KAI5B,OADAC,YADgB,kBAAMD,GAAU,KACZ,MAEhB,yBAAKE,UAAU,YACX,kBAACC,EAAA,EAAKC,MAAN,CAAYF,UAAS,uBAAkBH,EAAO,UAAU,IAAML,MAAOW,EAAUX,MAK3F,SAASW,EAAUX,GAEf,IADA,IAAIY,EAAU,GACLC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWjB,EAAMkB,QACxCN,EAAQO,QAAQL,GAAQ,EACxBF,EAAQQ,KAAKN,GAEbD,IAGR,OAAOb,EAAMqB,QAAO,SAACC,EAAMC,EAAOC,GAC9B,OAAOZ,EAAQO,QAAQI,IAAU,KCvF1BE,MA1Bf,WAEE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAASA,UAAU,eACjBkB,MAAO,CACH,wCACA,IACA,kIAEA,IACA,8MAKJC,QAAQ,IACRC,KAAM,IAER,kBAACzB,EAAD,SCfY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bce1986f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {Card} from \"semantic-ui-react\";\nimport React, {useState} from \"react\";\n\n\nconst items = [\n    {\n        header: 'Connect',\n        description:\n            'Reach out over the phone to someone you have not talked to in a while.',\n    },\n    {\n        header: 'Reflect with Someone',\n        description:\n            'Call someone you are close and ask them about three good and three bad things that happened to them this week.',\n    },\n    {\n        header: 'Watch',\n        description:\n            'Visit https://www.watch2gether.com/, create a room, and show your friends the funniest video you have ever seen.',\n    },\n    {\n        header: 'Watch',\n        description:\n            'Visit https://www.netflixparty.com/, create a party, and show your friends' +\n            ' your favorite movie.',\n    },\n    {\n        header: 'Talk to your doctor',\n        description:\n            'Ask your provider whether it would be' +\n            'possible to schedule remote appointments' +\n            'via Skype or FaceTime for mental health,' +\n            'substance use, or physical health needs. ',\n    },\n    {\n        header: 'Remember the Postal Service',\n        description:\n            'Send a letter to a relative in another state.',\n    },\n    {\n        header: 'Check local news',\n        description:\n            'Use the Internet, radio, and television to' +\n            'keep up with local ' +\n            'events.',\n    },\n    {\n        header: 'Workout',\n        description:\n            'Use a face-to-face video calling platform to call your favorite gym ' +\n            'buddy and challenge them to a plank contest (see who can last the longest planking).',\n    },\n    {\n        header: 'Support Restaurants ',\n        description:\n            'Use the Internet to find out what local restaurants are open for ' +\n            'takeout and order your favorite meal.',\n    },\n    {\n        header: 'Post',\n        description:\n            'Use the Internet to post a funny picture on social media.',\n    },\n    {\n        header: 'Enjoy the Outdoors',\n        description:\n            'Use a face-to-face video calling platform to call a friend ' +\n            'buddy, sit outside, and chat them. Hopefully it`s not too cold!',\n    },\n    {\n        header: 'Write to Express',\n        description:\n            'Write a story or a poem and then call a relative and read it to them.' +\n            ' I`m sure they will enjoy it!',\n    },\n    {\n        header: 'Go for a drive',\n        description:\n            'Go for a drive with someone who lives in your home. Visit your favorite road.',\n    },\n    {\n        header: 'Relax',\n        description:\n            'Relax your body often by doing things that' +\n            'work for you, like taking deep breaths or meditating',\n    },\n    {\n        header: 'Stretch',\n        description:\n            'Be sure to find someone you live with and ask them to stretch with you.',\n    },\n    {\n        header: 'Do Yoga',\n        description:\n            'Find a friend who will do some yoga with you over https://www.watch2gether.com/',\n    },\n];\n\nexport default function Cards() {\n    const [inProp, setInProp] = useState(false);\n    const setTrue = () => setInProp(true);\n    setTimeout(setTrue, 18000);\n    return (\n        <div className=\"App-body\">\n            <Card.Group className={`my-node-enter${inProp?\"-active\":\"\"}`} items={randItems(items)} />\n        </div>\n    )\n}\n\nfunction randItems(items) {\n    let indices = [];\n    for (let i = 0; i < 3; i++) {\n        let temp = Math.floor(Math.random() * items.length);\n        if (indices.indexOf(temp) < 0) {\n            indices.push(temp);\n        } else {\n            i--;\n        }\n    }\n    return items.filter((item, index, array) => {\n        return indices.indexOf(index) > -1\n    })\n}\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Typical from 'react-typical'\nimport Cards from './Cards'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typical className=\"typical-text\"\n          steps={[\n              'I know COVID-19 is changing our world',\n              1000,\n              'I know COVID-19 is changing our world, but we have to remember' +\n              ' to stay close and support our communities in these trying times.',\n              1000,\n              'I know COVID-19 is changing our world, but we have to remember' +\n              ' to stay close and support our communities in these trying times. ' +\n              'When we support our neighbors, friends, and family, they' +\n              ' make us stronger.',\n          ]}\n          wrapper=\"p\"\n          loop={1}\n        />\n        <Cards></Cards>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}